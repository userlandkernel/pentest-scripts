#!/usr/bin/env python

### Taken from https://github.com/PaulSec/API-dnsdumpster.com

from dnsdumpster.DNSDumpsterAPI import DNSDumpsterAPI
import os
import sys
import base64

class DomainAnalysis(object):

	def __init__(self, d):
		self.domain = d
		print("Domain: "+d)

	def analyze(self):
		if self.domain:
			domain = self.domain
			res = DNSDumpsterAPI(True).search(domain)
			if not res:
				print("No info about domain")
				return
			print("####### Domain #######")
			print(res['domain'])

			print("\n\n\n####### DNS Servers #######")
			for entry in res['dns_records']['dns']:
				print(("{domain} ({ip}) {as} {provider} {country}".format(**entry)))

			print("\n\n\n####### MX Records #######")
			for entry in res['dns_records']['mx']:
				print(("{domain} ({ip}) {as} {provider} {country}".format(**entry)))

			print("\n\n\n####### Host Records (A) #######")
			for entry in res['dns_records']['host']:
				if entry['reverse_dns']:
					print(("{domain} ({reverse_dns}) ({ip}) {as} {provider} {country}".format(**entry)))
				else:
					print(("{domain} ({ip}) {as} {provider} {country}".format(**entry)))

			print("\n\n\n####### TXT Records #######")
			for entry in res['dns_records']['txt']:
				print(entry)

			image_retrieved = res['image_data'] is not None
			print("\n\n\nRetrieved Network mapping image? {} (accessible in 'image_data')".format(image_retrieved))
			print(repr(base64.b64decode(res['image_data'])[:20]) + '...')

      open("domains/analysis/"+self.domain+".png", 'wb').write(res['image_data'].decode('base64')) # Save tree diagram

			xls_retrieved = res['xls_data'] is not None
			print("\n\n\nRetrieved XLS hosts? {} (accessible in 'xls_data')".format(xls_retrieved))
			print(repr(base64.b64decode(res['xls_data'])[:20]) + '...')

      open("domains/analysis/"+self.domain+".xlsx",'wb').write(res['xls_data'].decode('base64')) # Save report
      
		else:
			print("No domains to analyze.")



def usage():
	print("analyzedomain [domain / -f domains.list]")

def main():
	argv = sys.argv
	argc = len(argv)-1
	domains = 0
	domain = 0

	if argc <= 0:
		usage()
		exit(0)
	else:

		if argv[1] == "-f":
			if(argc <= 1):
				usage()
				exit(0)
			else:
				domains = argv[2]

		else:
			domain = argv[1]

		if domains == 0 and domain == 0:
			usage()
			exit(0)
		elif domains == 0 and domain != 0:
			DomainAnalysis(domain).analyze()
		else:
			fp = open(domains)
			if fp:
				for domain in fp:
					DomainAnalysis(str(domain)).analyze()
				fp.close()

main()
